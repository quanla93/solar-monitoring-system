# solar-monitoring-system/docker-compose.yml
version: '3.8'

services:
  # Infrastructure Services
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: solar-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Solar123!@#
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Solar123!@# -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solar-network

  mongodb:
    image: mongo:7.0
    container_name: solar-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=solar
      - MONGO_INITDB_ROOT_PASSWORD=solar123
      - MONGO_INITDB_DATABASE=solar_monitoring
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solar-network

  redis:
    image: redis:7.2-alpine
    container_name: solar-redis
    command: redis-server --appendonly yes --requirepass solar123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solar-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: solar-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solar-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: solar-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solar-network

  # Application Services
  solar-data-processing-service:
    build:
      context: ./solar-data-processing-service
      dockerfile: Dockerfile
    container_name: solar-data-processing-service
    depends_on:
      sqlserver:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:sqlserver://sqlserver:1433;databaseName=SolarMonitoring;encrypt=false
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=Solar123!@#
      - SPRING_DATA_MONGODB_URI=mongodb://solar:solar123@mongodb:27017/solar_monitoring?authSource=admin
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=solar123
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SOLAR_REDIS_SERVICE_URL=http://solar-redis-service:8081
      - SOLAR_KAFKA_SERVICE_URL=http://solar-kafka-service:8082
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - solar-network

  solar-redis-service:
    build:
      context: ./solar-redis-service
      dockerfile: Dockerfile
    container_name: solar-redis-service
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8081
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=solar123
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - solar-network

  solar-kafka-service:
    build:
      context: ./solar-kafka-service
      dockerfile: Dockerfile
    container_name: solar-kafka-service
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8082
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - solar-network

volumes:
  sqlserver_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

networks:
  solar-network:
    driver: bridge
    name: solar-monitoring-network